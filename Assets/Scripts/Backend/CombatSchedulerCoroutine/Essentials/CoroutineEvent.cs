// Code generated by CoroutineEventCodeGen.py

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace miniRAID
{
    public class SequentialAny<T> where T : Delegate
    {
        private List<T> listeners = new();

        public bool Invoke(params object[] vs)
        {
            foreach (var e in listeners.ToList())
            {
                var result = (bool)(e.DynamicInvoke(vs));
                if (result)
                {
                    return true;
                }
            }

            return false;
        }

        public bool InvokeWhenNot(bool initialValue, params object[] vs)
        {
            return initialValue || Invoke(vs);
        }
        
        public static SequentialAny<T> operator +(SequentialAny<T> evt, T listener)
        {
            if(evt == null) { evt = new(); }

            if(!evt.listeners.Contains(listener))
            {
                evt.listeners.Add(listener);
            }

            return evt;
        }

        public static SequentialAny<T> operator -(SequentialAny<T> evt, T listener)
        {
            if(evt == null) { return null; }

            if (evt.listeners.Contains(listener))
            {
                evt.listeners.Remove(listener);
            }

            return evt;
        }
    }
    
    public class CoroutineEvent<T0>
    {
        HashSet<Func<T0, IEnumerator>> listeners = new();

        public IEnumerator Invoke(params object[] vs)
        {
            foreach (var e in listeners.ToList())
            {
                yield return new JumpIn((IEnumerator)e.DynamicInvoke(vs));
            }
            yield break;
        }

        public static CoroutineEvent<T0> operator +(CoroutineEvent<T0> evt, Func<T0, IEnumerator> listener)
        {
            if(evt == null) { evt = new(); }

            if(!evt.listeners.Contains(listener))
            {
                evt.listeners.Add(listener);
            }

            return evt;
        }

        public static CoroutineEvent<T0> operator -(CoroutineEvent<T0> evt, Func<T0, IEnumerator> listener)
        {
            if(evt == null) { return null; }

            if (evt.listeners.Contains(listener))
            {
                evt.listeners.Remove(listener);
            }

            return evt;
        }
    }

    public class CoroutineEvent<T0, T1>
    {
        HashSet<Func<T0, T1, IEnumerator>> listeners = new();

        public IEnumerator Invoke(params object[] vs)
        {
            foreach (var e in listeners.ToList())
            {
                yield return new JumpIn((IEnumerator)e.DynamicInvoke(vs));
            }
            yield break;
        }

        public static CoroutineEvent<T0, T1> operator +(CoroutineEvent<T0, T1> evt, Func<T0, T1, IEnumerator> listener)
        {
            if(evt == null) { evt = new(); }

            if(!evt.listeners.Contains(listener))
            {
                evt.listeners.Add(listener);
            }

            return evt;
        }

        public static CoroutineEvent<T0, T1> operator -(CoroutineEvent<T0, T1> evt, Func<T0, T1, IEnumerator> listener)
        {
            if(evt == null) { return null; }

            if (evt.listeners.Contains(listener))
            {
                evt.listeners.Remove(listener);
            }

            return evt;
        }
    }

    public class CoroutineEvent<T0, T1, T2>
    {
        HashSet<Func<T0, T1, T2, IEnumerator>> listeners = new();

        public IEnumerator Invoke(params object[] vs)
        {
            foreach (var e in listeners.ToList())
            {
                yield return new JumpIn((IEnumerator)e.DynamicInvoke(vs));
            }
            yield break;
        }

        public static CoroutineEvent<T0, T1, T2> operator +(CoroutineEvent<T0, T1, T2> evt, Func<T0, T1, T2, IEnumerator> listener)
        {
            if(evt == null) { evt = new(); }

            if(!evt.listeners.Contains(listener))
            {
                evt.listeners.Add(listener);
            }

            return evt;
        }

        public static CoroutineEvent<T0, T1, T2> operator -(CoroutineEvent<T0, T1, T2> evt, Func<T0, T1, T2, IEnumerator> listener)
        {
            if(evt == null) { return null; }

            if (evt.listeners.Contains(listener))
            {
                evt.listeners.Remove(listener);
            }

            return evt;
        }
    }

    public class CoroutineEvent<T0, T1, T2, T3>
    {
        HashSet<Func<T0, T1, T2, T3, IEnumerator>> listeners = new();

        public IEnumerator Invoke(params object[] vs)
        {
            foreach (var e in listeners.ToList())
            {
                yield return new JumpIn((IEnumerator)e.DynamicInvoke(vs));
            }
            yield break;
        }

        public static CoroutineEvent<T0, T1, T2, T3> operator +(CoroutineEvent<T0, T1, T2, T3> evt, Func<T0, T1, T2, T3, IEnumerator> listener)
        {
            if(evt == null) { evt = new(); }

            if(!evt.listeners.Contains(listener))
            {
                evt.listeners.Add(listener);
            }

            return evt;
        }

        public static CoroutineEvent<T0, T1, T2, T3> operator -(CoroutineEvent<T0, T1, T2, T3> evt, Func<T0, T1, T2, T3, IEnumerator> listener)
        {
            if(evt == null) { return null; }

            if (evt.listeners.Contains(listener))
            {
                evt.listeners.Remove(listener);
            }

            return evt;
        }
    }

    public class CoroutineEvent<T0, T1, T2, T3, T4>
    {
        HashSet<Func<T0, T1, T2, T3, T4, IEnumerator>> listeners = new();

        public IEnumerator Invoke(params object[] vs)
        {
            foreach (var e in listeners.ToList())
            {
                yield return new JumpIn((IEnumerator)e.DynamicInvoke(vs));
            }
            yield break;
        }

        public static CoroutineEvent<T0, T1, T2, T3, T4> operator +(CoroutineEvent<T0, T1, T2, T3, T4> evt, Func<T0, T1, T2, T3, T4, IEnumerator> listener)
        {
            if(evt == null) { evt = new(); }

            if(!evt.listeners.Contains(listener))
            {
                evt.listeners.Add(listener);
            }

            return evt;
        }

        public static CoroutineEvent<T0, T1, T2, T3, T4> operator -(CoroutineEvent<T0, T1, T2, T3, T4> evt, Func<T0, T1, T2, T3, T4, IEnumerator> listener)
        {
            if(evt == null) { return null; }

            if (evt.listeners.Contains(listener))
            {
                evt.listeners.Remove(listener);
            }

            return evt;
        }
    }

    public class CoroutineEvent<T0, T1, T2, T3, T4, T5>
    {
        HashSet<Func<T0, T1, T2, T3, T4, T5, IEnumerator>> listeners = new();

        public IEnumerator Invoke(params object[] vs)
        {
            foreach (var e in listeners.ToList())
            {
                yield return new JumpIn((IEnumerator)e.DynamicInvoke(vs));
            }
            yield break;
        }

        public static CoroutineEvent<T0, T1, T2, T3, T4, T5> operator +(CoroutineEvent<T0, T1, T2, T3, T4, T5> evt, Func<T0, T1, T2, T3, T4, T5, IEnumerator> listener)
        {
            if(evt == null) { evt = new(); }

            if(!evt.listeners.Contains(listener))
            {
                evt.listeners.Add(listener);
            }

            return evt;
        }

        public static CoroutineEvent<T0, T1, T2, T3, T4, T5> operator -(CoroutineEvent<T0, T1, T2, T3, T4, T5> evt, Func<T0, T1, T2, T3, T4, T5, IEnumerator> listener)
        {
            if(evt == null) { return null; }

            if (evt.listeners.Contains(listener))
            {
                evt.listeners.Remove(listener);
            }

            return evt;
        }
    }

    public class CoroutineEvent<T0, T1, T2, T3, T4, T5, T6>
    {
        HashSet<Func<T0, T1, T2, T3, T4, T5, T6, IEnumerator>> listeners = new();

        public IEnumerator Invoke(params object[] vs)
        {
            foreach (var e in listeners.ToList())
            {
                yield return new JumpIn((IEnumerator)e.DynamicInvoke(vs));
            }
            yield break;
        }

        public static CoroutineEvent<T0, T1, T2, T3, T4, T5, T6> operator +(CoroutineEvent<T0, T1, T2, T3, T4, T5, T6> evt, Func<T0, T1, T2, T3, T4, T5, T6, IEnumerator> listener)
        {
            if(evt == null) { evt = new(); }

            if(!evt.listeners.Contains(listener))
            {
                evt.listeners.Add(listener);
            }

            return evt;
        }

        public static CoroutineEvent<T0, T1, T2, T3, T4, T5, T6> operator -(CoroutineEvent<T0, T1, T2, T3, T4, T5, T6> evt, Func<T0, T1, T2, T3, T4, T5, T6, IEnumerator> listener)
        {
            if(evt == null) { return null; }

            if (evt.listeners.Contains(listener))
            {
                evt.listeners.Remove(listener);
            }

            return evt;
        }
    }

    public class CoroutineEvent<T0, T1, T2, T3, T4, T5, T6, T7>
    {
        HashSet<Func<T0, T1, T2, T3, T4, T5, T6, T7, IEnumerator>> listeners = new();

        public IEnumerator Invoke(params object[] vs)
        {
            foreach (var e in listeners.ToList())
            {
                yield return new JumpIn((IEnumerator)e.DynamicInvoke(vs));
            }
            yield break;
        }

        public static CoroutineEvent<T0, T1, T2, T3, T4, T5, T6, T7> operator +(CoroutineEvent<T0, T1, T2, T3, T4, T5, T6, T7> evt, Func<T0, T1, T2, T3, T4, T5, T6, T7, IEnumerator> listener)
        {
            if(evt == null) { evt = new(); }

            if(!evt.listeners.Contains(listener))
            {
                evt.listeners.Add(listener);
            }

            return evt;
        }

        public static CoroutineEvent<T0, T1, T2, T3, T4, T5, T6, T7> operator -(CoroutineEvent<T0, T1, T2, T3, T4, T5, T6, T7> evt, Func<T0, T1, T2, T3, T4, T5, T6, T7, IEnumerator> listener)
        {
            if(evt == null) { return null; }

            if (evt.listeners.Contains(listener))
            {
                evt.listeners.Remove(listener);
            }

            return evt;
        }
    }

    public class CoroutineEvent<T0, T1, T2, T3, T4, T5, T6, T7, T8>
    {
        HashSet<Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, IEnumerator>> listeners = new();

        public IEnumerator Invoke(params object[] vs)
        {
            foreach (var e in listeners.ToList())
            {
                yield return new JumpIn((IEnumerator)e.DynamicInvoke(vs));
            }
            yield break;
        }

        public static CoroutineEvent<T0, T1, T2, T3, T4, T5, T6, T7, T8> operator +(CoroutineEvent<T0, T1, T2, T3, T4, T5, T6, T7, T8> evt, Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, IEnumerator> listener)
        {
            if(evt == null) { evt = new(); }

            if(!evt.listeners.Contains(listener))
            {
                evt.listeners.Add(listener);
            }

            return evt;
        }

        public static CoroutineEvent<T0, T1, T2, T3, T4, T5, T6, T7, T8> operator -(CoroutineEvent<T0, T1, T2, T3, T4, T5, T6, T7, T8> evt, Func<T0, T1, T2, T3, T4, T5, T6, T7, T8, IEnumerator> listener)
        {
            if(evt == null) { return null; }

            if (evt.listeners.Contains(listener))
            {
                evt.listeners.Remove(listener);
            }

            return evt;
        }
    }

}
