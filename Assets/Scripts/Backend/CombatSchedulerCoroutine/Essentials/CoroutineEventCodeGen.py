import os

template = '''    public class CoroutineEvent<%s>
    {
        HashSet<Func<%s, IEnumerator>> listeners = new();

        public IEnumerator Invoke(params object[] vs)
        {
            foreach (var e in listeners.ToList())
            {
                yield return new JumpIn((IEnumerator)e.DynamicInvoke(vs));
            }
            yield break;
        }

        static Func<%s, IEnumerator> Wrapper(Action<%s> infunc)
        {
            IEnumerator foo(%s) // TArgs
            {
                infunc.Invoke(%s); // TParams
                yield break;
            }

            return foo;
        }

        public static CoroutineEvent<%s> operator +(CoroutineEvent<%s> evt, Func<%s, IEnumerator> listener)
        {
            if(evt == null) { evt = new(); }

            if(!evt.listeners.Contains(listener))
            {
                evt.listeners.Add(listener);
            }

            return evt;
        }

        public static CoroutineEvent<%s> operator +(CoroutineEvent<%s> evt, Action<%s> listener)
        {
            return evt + Wrapper(listener);
        }

        public static CoroutineEvent<%s> operator -(CoroutineEvent<%s> evt, Func<%s, IEnumerator> listener)
        {
            if(evt == null) { return null; }

            if (!evt.listeners.Contains(listener))
            {
                evt.listeners.Remove(listener);
            }

            return evt;
        }

        public static CoroutineEvent<%s> operator -(CoroutineEvent<%s> evt, Action<%s> listener)
        {
            return evt - Wrapper(listener);
        }
    }
'''

with open("CoroutineEvent.cs", "w") as f:
    f.write(
'''// Code generated by CoroutineEventCodeGen.py

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace miniRAID
{
''')

    for i in range(1,10):
        TTypes = ", ".join(["T%d" % j for j in range(i)])
        TArgs = ", ".join(["T%d %s" % (j, chr(ord('a') + j)) for j in range(i)])
        TParams = ", ".join(["%s" % chr(ord('a') + j) for j in range(i)])

        code = template % (TTypes, TTypes, TTypes, TTypes, TArgs, TParams, TTypes, TTypes, TTypes, TTypes, TTypes, TTypes, TTypes, TTypes, TTypes, TTypes, TTypes, TTypes)

        f.write(code + "\n")

    f.write(
'''}
''')
